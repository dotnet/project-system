# Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE.md file in the project root for more information.

# Name: DotNet-Project-System
# URL: https://dev.azure.com/devdiv/DevDiv/_build?definitionId=9675

# Produces the signed product build for insertion into the Visual Studio & Visual Studio Code Extension

###################################################################################################################################################################
# PIPELINE METADATA
###################################################################################################################################################################

# Activates the pipeline after a PR is merged.
# See: https://docs.microsoft.com/azure/devops/pipelines/yaml-schema/trigger?view=azure-pipelines
trigger:
  branches:
    include:
    - main
    # Our VS alignment branches start with dev (for example: dev17.2.x)
    - dev*
    # Any other branches that contain major feature development, or require access to the pipeline, prior to merge.
    - feature/*
  paths:
    exclude:
    - docs/*
    - README.md

# Disable PR builds for this pipeline.
# See: https://docs.microsoft.com/azure/devops/pipelines/yaml-schema/pr?view=azure-pipelines#examples
pr: none

schedules:
# Runs the pipelines at 4am PST (11am UTC) and creates a VS & vs-green insertion PR.
# YAML reference: https://docs.microsoft.com/azure/devops/pipelines/yaml-schema/schedules-cron?view=azure-pipelines
# CRON syntax: https://docs.microsoft.com/azure/devops/pipelines/process/scheduled-triggers?view=azure-devops&tabs=yaml#cron-syntax
- cron: '0 11 * * *'
  displayName: Daily 4am PT Build with Insertion
  branches:
    include:
    - main

resources:
  repositories:
  - repository: MicroBuildTemplate
    type: git
    name: 1ESPipelineTemplates/MicroBuildTemplate
    ref: refs/tags/release
  # This repo is used to create the insertion PR into the vs-green repo.
  - repository: VSCodeExtensionRepo
    type: git
    name: vs-green
  # This repo is used to create the version upgrade PR into the dotnet-project-system-vscode repo.
  - repository: ProjectSystemVSCodeExtensionRepo
    type: git
    name: dotnet-project-system-vscode

# Note: Only add pipeline variables if they apply to most of the stages/jobs.
variables:
  # The configuration for the build is used throughout the various pipelines as the file paths for output contain the build configuration as a folder name.
  BuildConfiguration: Release
  # https://docs.microsoft.com/dotnet/core/tools/dotnet-environment-variables#dotnet_skip_first_time_experience
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  # https://docs.microsoft.com/dotnet/core/tools/dotnet-environment-variables#dotnet_nologo
  DOTNET_NOLOGO: true
  # https://devdiv.visualstudio.com/DevDiv/_wiki/wikis/DevDiv.wiki/26284/Enabling-SBOM-For-Your-Component-Insertion-into-VS?anchor=1.-add-the-%27manifest-generator-task%27-to-your-pipeline
  Packaging.EnableSBOMSigning: true
  # Opt out of automatically injecting Codesign Validation into the pipeline. We run Codesign Validation as part of the Compliance pipeline.
  # See: https://aka.ms/gdn-injection
  runCodesignValidationInjection: false
  # Allows CodeQL to run on our Build job.
  # https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/codeql/configuring-codeql3000-ado-pipelines
  Codeql.Enabled: true
  # Default to skipping auto-injection for CodeQL. It is not skipped in the Build job only.
  # https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/codeql/configuring-codeql3000-ado-pipelines#monolithic-repos-and-multistage-pipelines
  Codeql.SkipTaskAutoInjection: true
  # Enable reporting CodeQL issues via TSA.
  # See: https://devdiv.visualstudio.com/DevDiv/_wiki/wikis/DevDiv.wiki/3212/TSA-Onboarding
  Codeql.TSAEnabled: true
  Codeql.TSAOptionsPath: $(Build.SourcesDirectory)/eng/pipelines/configuration/TSAConfig.gdntsa
  # Sets the fetch depth to no longer be a shallow clone. Nerdbank.GitVersioning requires a non-shallow clone.
  # See:
  # - https://github.com/dotnet/Nerdbank.GitVersioning/issues/423
  # - https://github.com/dotnet/Nerdbank.GitVersioning/issues/92
  # Variable reference: https://learn.microsoft.com/en-us/azure/devops/pipelines/repos/pipeline-options-for-git?view=azure-devops&tabs=yaml#shallow-fetch
  Agent.Source.Git.ShallowFetchDepth: 0
  TeamName: DotNet-Project-System
  TeamEmail: dotnetdevexproj@microsoft.com
  
parameters:
- name: CreateVSInsertion
  displayName: Create VS Insertion PR
  type: boolean
  default: false
- name: InsertionVSBranch
  displayName: VS Insertion Branch Name
  type: string
  default: main
- name: CreateVSGreenInsertion
  displayName: Create vs-green Insertion PR
  type: boolean
  default: false
- name: InsertionVSGreenBranch
  displayName: vs-green Insertion Branch Name
  type: string
  default: main
# This should only be enabled when generating optimization data for the first time.
# See details in the Build job for the MicroBuildOptProfPlugin task.
- name: SkipOptimize
  displayName: Do Not Optimize Assemblies
  type: boolean
  default: false

###################################################################################################################################################################
# STAGES
###################################################################################################################################################################
extends:
  template: azure-pipelines/MicroBuild.1ES.Official.yml@MicroBuildTemplate
  parameters:
    sdl:
      sourceAnalysisPool: VSEngSS-MicroBuild2022-1ES
      tsa:
        enabled: true
        configFile: $(Build.SourcesDirectory)/eng/pipelines/configuration/TSAConfig.gdntsa
      credscan:
        enabled: true
      policheck:
        enabled: true  
      codeSignValidation:
        additionalTargetsGlobPattern: -|$(Build.SourcesDirectory)\artifacts\output\VSSetup\Insertion\bootstrapper\**
    pool:
      # Agent Queue: https://devdiv.visualstudio.com/DevDiv/_settings/agentqueues?queueId=3123&view=jobs
      name: VSEngSS-MicroBuild2022-1ES
    stages:
    - stage: Build
      displayName: Build
      variables:
        - group: VSEng sponsored APIScan # Expected to provide ApiScanClientId
      jobs:
        - template: eng/pipelines/templates/build-official-release.yml@self
          parameters:
            SkipOptimize: ${{ parameters.SkipOptimize }}
            CreateVSInsertion: ${{ parameters.CreateVSInsertion }}
            InsertionVSBranch: ${{ parameters.InsertionVSBranch }}
            CreateVSGreenInsertion: ${{ parameters.CreateVSGreenInsertion }}
            InsertionVSGreenBranch: ${{ parameters.InsertionVSGreenBranch }}
    - stage: Publish
      displayName: Publish
      dependsOn: Build
      jobs:
      - template: eng/pipelines/templates/publish-assets-and-packages.yml@self
      - template: eng/pipelines/templates/publish-symbols.yml@self
    
    - stage: Localization
      displayName: Localization
      # [] clears the dependency on the previous stages allowing parallelism.
      dependsOn: []
      variables:
      # Variable group containing the PATs required for running OneLocBuild.
      # See: https://devdiv.visualstudio.com/DevDiv/_library?itemType=VariableGroups&view=VariableGroupView&variableGroupId=343&path=OneLocBuildVariables
      # Variables used:
      # - BotAccount-dotnet-bot-repo-PAT
      # - dn-bot-ceapex-package-r
      - group: OneLocBuildVariables
      jobs:
      - template: eng/pipelines/templates/generate-localization.yml@self
        
    # Run this stage only when specifically requested (via CreateVSInsertion or CreateVSGreenInsertion) or when the pipeline was ran on a schedule.
    # Conditional insertion syntax:
    # - https://docs.microsoft.com/azure/devops/pipelines/process/expressions?view=azure-devops#conditional-insertion
    # - https://www.andrewhoefling.com/Blog/Post/conditional-insertion-in-azure-pipelines-yaml
    - ${{ if or(eq(parameters.CreateVSInsertion, true), eq(parameters.CreateVSGreenInsertion, true), eq(variables['Build.Reason'], 'Schedule')) }}:
      - stage: Insertion
        displayName: Insertion
        dependsOn:
        # The Build dependsOn is required for putting that stage's variables into the stageDependencies property bag (for PackageVersion).
        - Build
        - Publish
        
        variables:
          # Gets the PackageVersion variable produced by the Build pipeline.
          PackageVersion: $[ stageDependencies.Build.BuildOfficialRelease.outputs['SetPackageVersion.PackageVersion'] ]
          # Gets the AssemblyVersion variable produced by the Build pipeline.
          AssemblyVersion: $[ stageDependencies.Build.BuildOfficialRelease.outputs['SetAssemblyVersion.AssemblyVersion'] ]
          InsertionVSBranch: ${{ parameters.InsertionVSBranch }}
          # Hard-coded assumption that the commit referenced by the previous VS insertion is within the last 100 commits in the $(InsertionVSBranch) of the VS repo.
          PriorInsertionCommitDepth: 100
          # This variable is required by the component-insertion.yml template to insert the NPM package.
          # The name of this package matches name defined in the package.json.
          InsertNpmDependencies: '@microsoft/microsoft.visualstudio.projectsystem.managed@$(PackageVersion)'
          InsertReviewers: '.NET Project System'
        jobs:
        - ${{ if or(eq(parameters.CreateVSInsertion, true), eq(variables['Build.Reason'], 'Schedule')) }}:    
          - template: eng/pipelines/templates/generate-vs-insertion.yml@self
    
        - ${{ if or(eq(parameters.CreateVSGreenInsertion, true), eq(variables['Build.Reason'], 'Schedule')) }}:
          - template: azure-pipelines/external/component-insertion.yml@VSCodeExtensionRepo
            parameters:
              sourceBranch: $(Build.SourceBranch)
              sourceCommit: $(Build.SourceVersion)
              runName: $(Build.BuildNumber)
              runID: $(Build.BuildId)
              pipelineID: $(System.DefinitionId)
              InsertTargetBranch: ${{ parameters.InsertionVSGreenBranch }}
              ComponentSubDir: $(Build.Repository.Name)
    
          - template: eng/pipelines/templates/upgrade-version.yml@ProjectSystemVSCodeExtensionRepo
            parameters:
              packageVersion: $(PackageVersion)
