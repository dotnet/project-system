# Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE.md file in the project root for more information.
parameters:
  - name: SkipOptimize
    type: boolean
  - name: CreateVSInsertion
    type: boolean
  - name: InsertionVSBranch
    type: string
  - name: CreateVSGreenInsertion
    type: boolean
  - name: InsertionVSGreenBranch
    type: string
  
jobs:
- job: BuildOfficialRelease
  displayName: Build Official Release
  # We make this timeout more than double the normal amount of build time as signing has a highly variable amount of time to complete.
  timeoutInMinutes: 90 # API Scan can take a long time and fail the build
  templateContext:
    mb:
      signing:
        enabled: true
        # See: https://github.com/dotnet/project-system/issues/7935, signType cannot be test (fails erroneously)
        signType: real
        esrpSigning: true
        zipSources: false
      sbom:
        enabled: true
    outputParentDirectory: $(Build.SourcesDirectory)/artifacts/output
    outputs:
      # Publish artifacts
      - output: pipelineArtifact
        displayName: Publish Build Artifacts
        targetPath: $(Build.SourcesDirectory)/artifacts/output
        artifactName: $(Build.BuildNumber)
        condition: succeededOrFailed()
      - output: pipelineArtifact
        displayName: Publish Staging Artifacts
        targetPath: $(Build.StagingDirectory)
        artifactName: Staging
        condition: succeededOrFailed()
      - output: pipelineArtifact
        displayName: Publish Loc Artifacts
        targetPath: $(Build.SourcesDirectory)/artifacts/output/bin/Dlls/
        artifactName: Loc
        condition: succeededOrFailed()
    
      # Publish VS drop
      - output: microBuildVstsDrop
        dropFolder: $(Build.SourcesDirectory)/artifacts/output/VSSetup/Insertion
        # TODO: Consider using $(GitBuildVersion) instead of $(Build.BuildNumber) as it better correlates the build of the code to the VS insertion.
        # Meaning, instead of VS Insertion -> Pipeline BuildNumber -> Code BuildVersion, it would just be VS Insertion -> Code BuildVersion.
        # If this is updated, VstsDropNames set in build-official-release.yml would also need to be updated.
        # For GitBuildVersion: https://github.com/dotnet/Nerdbank.GitVersioning/blob/main/doc/cloudbuild.md#automatically-match-cloud-build-numbers-to-to-your-git-version
        # Issue: https://github.com/dotnet/project-system/issues/8431
        # Example of current path: 'Products/[DevDiv]/[vs-resource-explorer]/[main]/[x.x]'
        dropName: Products/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildNumber)
        # See https://dev.azure.com/devdiv/DevDiv/_wiki/wikis/DevDiv.wiki/35351/Retain-Drops
        dropRetentionDays: 183
        # When this isn't provided, the tool sets the --AadAuth flag instead of using --PatAuthEnvVar. The AadAuth doesn't seem to work for this situation.
        accessToken: $(System.AccessToken)

      # Publish nuget packages
      - output: nuget
        displayName: Publish Nuget Packages to vs-green
        packagesToPush: $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/packages/*.nupkg
        packageParentPath: $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/packages
        publishVstsFeed: DevDiv/vs-green
        allowPackageConflicts: true
        nuGetFeedType: internal
      # Publishes the NuGet packages to DevDiv/VS (https://dev.azure.com/DevDiv/DevDiv/_artifacts/feed/VS)
      # A separate process will republish these packages to DevDiv/VS-CoreXtFeeds (https://dev.azure.com/DevDiv/DevDiv/_artifacts/feed/VS-CoreXtFeeds)
      - output: nuget
        displayName: Publish Nuget Packages to DevDiv
        packagesToPush: $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/packages/*.nupkg
        packageParentPath: $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/packages
        # Feed Endpoint: https://devdiv.pkgs.visualstudio.com/_packaging/VS/nuget/v3/index.json
        # Requires VssFeedId despite documentation here: https://docs.microsoft.com/azure/devops/pipelines/artifacts/nuget?view=azure-devops&tabs=yaml#publish-a-package
        publishVstsFeed: 97a41293-2972-4f48-8c0e-05493ae82010
        allowPackageConflicts: true
      - output: nuget
        displayName: Publish Nuget Packages to azure-publish
        packagesToPush: $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/packages/*.nupkg
        packageParentPath: $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/packages
        publishFeedCredentials: azure-public/vs-impl
        allowPackageConflicts: true
        nuGetFeedType: external
        

  steps:

  ###################################################################################################################################################################
  # Validation of insertion branches
  ###################################################################################################################################################################

  # See: https://stackoverflow.com/a/30524983/294804
  - powershell: if (-not (git ls-remote --heads https://$(System.AccessToken)@dev.azure.com/devdiv/DevDiv/_git/VS ${{ parameters.InsertionVSBranch }})) { Write-Host "The branch name '${{ parameters.InsertionVSBranch }}' is not valid."; exit 1 }
    displayName: Validate VS Insertion Branch Name
    condition: eq(${{ parameters.CreateVSInsertion }}, true)
  - powershell: if (-not (git ls-remote --heads https://$(System.AccessToken)@dev.azure.com/devdiv/DevDiv/_git/vs-green ${{ parameters.InsertionVSGreenBranch }})) { Write-Host "The branch name '${{ parameters.InsertionVSGreenBranch }}' is not valid."; exit 1 }
    displayName: Validate vs-green Insertion Branch Name
    condition: eq(${{ parameters.CreateVSGreenInsertion }}, true)
    
    # This requires the OptimizationInputs via the 'Publish OptimizationInputs drop' step in the release pipeline.
    # To generate ProfilingInputs for the first time, set this input: ShouldSkipOptimize: true
    # See documentation here: https://devdiv.visualstudio.com/DevDiv/_wiki/wikis/DevDiv.wiki/2602/Build-With-Expired-(or-Without-Prior)-Optimization-Profiling-Data
    # This plugin will restore MicroBuild.Plugins.OptProf which is required to create ProfilingInputs data.
    # The projects include OptProf.targets which uses MicroBuild.Plugins.OptProf to run the target GenerateProfilingInputs on each project.
  - task: MicroBuildOptProfPlugin@6
    displayName: Install OptProf Plugin
    inputs:
      ProfilingInputsDropName: ProfilingInputs/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildId)
      OptimizationInputsLookupMethod: DropPrefix
      DropNamePrefix: OptimizationInputs/$(System.TeamProject)/$(Build.Repository.Name)
      AccessToken: $(System.AccessToken)
      feedSource: https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json
      ShouldSkipOptimize: $(SkipOptimize)
      # This value determines how old the optimization data is allowed to be.
      # If the delta of the number of commits between the commit used for the last produced optimization data and the current commit is greater than this value,
      # this task will always fail. The only way to fix it is produce new optimization data.
      # A temporary fix is to increase this value. However, it may cause a perf regression since eventually, the optimization data will no longer be aligned with the actual source content in the repo.
      NumberCommitsToSearch: 100

  ###################################################################################################################################################################
  # BUILD REPOSITORY
  ###################################################################################################################################################################

  # Use a disabled, empty script to display the section header in the pipeline UI.
  - script:
    displayName: === Build Repository ===
    condition: false

  # Runs the full build of the projects in the repository. See Build.proj for details.
  - script: $(Build.SourcesDirectory)/build.cmd /v:normal /p:Configuration=$(BuildConfiguration) /p:CIBuild=true
    displayName: Build All Projects
    env:
      # The Microsoft.VisualStudio.Internal.MicroBuild.SetupTooling.props assumes this value is set, which sets the ManifestPublishUrl property.
      # The ManifestPublishUrl property is used in the FinalizeManifest target in Microsoft.VisualStudio.Setup.Tools.targets to set the correct drop destination for the VSMan assets (VSIX and sbom.json).
      # This is normally set via the MicroBuildSwixPlugin task as a pipeline variable. With modern setup authoring, we do not want to run this task prior to the build itself.
      VstsDropNames: Products/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildNumber)
      # This allows NuGet to retry in situations related to "automatic retry for untrusted root failures."
      # We are experiencing issues with NuGet package restoration stating, "The author primary signature validity period has expired."
      # Details on this issue can be found here: https://github.com/dotnet/arcade/issues/13070
      # Variable reference: https://learn.microsoft.com/en-us/nuget/reference/errors-and-warnings/nu3028#retry-untrusted-root-failures
      NUGET_EXPERIMENTAL_CHAIN_BUILD_RETRY_POLICY: 3,1000

  # Sets the PackageVersion variable for the job. This variable is not used by this job; instead, it is consumed by the Insertion job.
  # https://docs.microsoft.com/azure/devops/pipelines/process/set-variables-scripts?view=azure-devops&tabs=powershell#set-variable-properties
  - powershell: Write-Host "##vso[task.setvariable variable=PackageVersion;isoutput=true]$(NBGV_NuGetPackageVersion)"
    displayName: Set PackageVersion Variable
    # Name is required to reference the variables created within this build step in other stages.
    name: SetPackageVersion

  # Sets the AssemblyVersion variable for the job. This variable is not used by this job; instead, it is consumed by the Insertion job.
  # https://docs.microsoft.com/azure/devops/pipelines/process/set-variables-scripts?view=azure-devops&tabs=powershell#set-variable-properties
  - powershell: Write-Host "##vso[task.setvariable variable=AssemblyVersion;isoutput=true]$(NBGV_AssemblyVersion)"
    displayName: Set AssemblyVersion Variable
    # Name is required to reference the variables created within this build step in other stages.
    name: SetAssemblyVersion

  # Required for the MicroBuildBuildVSBootstrapper task. See description above that task for details.
  # This should not be installed prior to building the repo as it may interfere with building the swixproj and vsmanproj projects.
  - task: MicroBuildSwixPlugin@4
    displayName: Install Swix Plugin

  # Sets the VisualStudioMinimumVersion variable for the job. This variable is also used by the APIScan job.
  # https://docs.microsoft.com/azure/devops/pipelines/process/set-variables-scripts?view=azure-devops&tabs=powershell#set-variable-properties
  - powershell: Write-Host "##vso[task.setvariable variable=VisualStudioMinimumVersion;isoutput=true]$(. '$(Build.SourcesDirectory)/eng/scripts/GetVisualStudioMinimumVersion.ps1')"
    displayName: Set VisualStudioMinimumVersion Variable
    # Name is required to reference the variables created within this build step in other stages.
    name: SetVisualStudioMinimumVersionVariable

  # Creates the VS bootstrapper information based on the build's .vsman file.
  # This bootstrapper information is only used for OptProf currently.
  # Since this data will be output with rest of our insertion files, we produce this data now and publish it in the build artifacts.
  # This task creates 2 assets:
  # - The bootstrapper metadata file: $(Build.StagingDirectory)/MicroBuild/Output/BootstrapperInfo.json
  # - The bootstrapper executable (and associated files): [outputFolder]/bootstrapper
  # This task requires these plugins:
  # - MicroBuildSigningPlugin: uses signjson.exe to sign the manifests
  # - MicroBuildSwixPlugin: uses vsman.exe and sets the environment variable ManifestPublishUrl
  # Documentation: https://devdiv.visualstudio.com/DevDiv/_wiki/wikis/DevDiv.wiki/643/How-to-Build-a-Bootstrapper
  - task: MicroBuildBuildVSBootstrapper@3
    displayName: Build VS Bootstrapper
    inputs:
      bootstrapperCoreVersion: latest
      vsMajorVersion: $(SetVisualStudioMinimumVersionVariable.VisualStudioMinimumVersion)
      channelName: int.main
      manifests: $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/VSSetup/Insertion/SetupManifest.vsman
      # Outputting to the Insertion folder allows the bootstrapper to be published to the Products drop, along with our insertion files.
      # The merged .vsman (OverlaidInstallerManifest.vsman) created by the bootstrapper assumes the bootstrapper will be output to the same drop (Products) as the insertion files.
      outputFolder: $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/VSSetup/Insertion
      
  - task: CopyFiles@2
    inputs:
      SourceFolder: $(Agent.TempDirectory)\MicroBuild\Output
      TargetFolder: $(Build.StagingDirectory)\MicroBuild\Output
    displayName: 'Copy BootstrapperInfo.json to Staging'

    # Run this task only when the pipeline was ran on a schedule.
  - ${{ if eq(variables['Build.Reason'], 'Schedule') }}:
    # This adds our source information to http://index (which is called Codex).
    # https://github.com/Ref12/Codex
    # This runs after the build because it needs:
    # - source files used in the build (including the generated ones in the obj directory)
    # - binaries (.dll) passed as references
    # - .binlog that ties it all together, describes what happened during the build, and where all the inputs are
    # The task uploads the outputs of the process to the pipeline artifacts as 'CodexOutputs' with the file 'store.zip'.
    # There is a separate process that scans all the Azure Pipelines for this specific artifact on a weekly basis and uploads it to the http://index database.
    - task: Ref12Analyze@0
      displayName: Add Build to Codex
      inputs:
        # Argument information can be found here:
        # - https://github.com/Ref12/Codex/blob/d759c4b44bad0f307ec33319278e62d70cf730f3/src/Codex.Automation.Workflow/Program.cs#L47
        # - https://github.com/Ref12/Codex/blob/d759c4b44bad0f307ec33319278e62d70cf730f3/src/Codex/CodexApplication.cs#L52
        workflowArguments: |
          /sourcesDirectory:$(Build.SourcesDirectory)
          /codexRepoUrl:$(Build.Repository.Uri)
          /repoName:$(Build.Repository.Name)
          /additionalCodexArguments:-bld
          /additionalCodexArguments:$(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/log
          /additionalCodexArguments:-noMsBuildLocator
      # This is a non-critical task, so don't fail the build if it fails.
      continueOnError: true

  - template: analyze-compliance.yml
    parameters:
      # For us software version is same as nuget package version
      SoftwareVersion: $(NBGV_NuGetPackageVersion)

  ###################################################################################################################################################################
  # PUBLISH BUILD
  # Steps in this section should contain 'condition: succeededOrFailed()' since these artifacts can be used for analyzing build failures.
  # https://docs.microsoft.com/azure/devops/pipelines/process/tasks?view=azure-devops&tabs=yaml#task-control-options
  ###################################################################################################################################################################

  # Publishes the test results to the Azure Pipeline itself so they can be viewed in the UI.
  # This needs to be ran after the build, because if the build failed due to a test failure, the test results wouldn't be published.
  - task: PublishTestResults@2
    displayName: Publish Test Results
    inputs:
      testRunner: VSTest
      testResultsFiles: $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/TestResults/**/*.trx
      testRunTitle: Unit Test Results
    condition: succeededOrFailed()
    
    # The .artifactignore file filters the artifacts published from a particular folder.
    # This must be present in the folder we want to publish and be named '.artifactignore'.
    # See: https://docs.microsoft.com/azure/devops/artifacts/reference/artifactignore?view=azure-devops
  - powershell: Copy-Item -Path '$(Build.SourcesDirectory)/eng/pipelines/configuration/staging.artifactignore' -Destination '$(Build.StagingDirectory)/.artifactignore'
    displayName: Copy Staging Artifact Filter
    condition: succeededOrFailed()
    
    # This output folder is used for 1ES code signing validation
  - task: CopyFiles@2
    displayName: Copy necessary files to output folder
    inputs:
      SourceFolder: $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)
      TargetFolder: $(Build.SourcesDirectory)/artifacts/output
      Contents: |
        *\**
        !obj\**
        !bin\UnitTests\**
        !bin\IntegrationTests\**
        !bin\Dlls\net472\ProjectSystemSetup.dll
        !bin\Dlls\net472\ProjectSystem.dll
        !bin\Dlls\net472\VisualStudioEditorsSetup.dll
        !bin\Dlls\net472\Setup.dll
        !SymStore\**    
        !VSSetup\Insertion\bootstrapper\**\vs_enterprise.exe

  - template: WIFtoPATauth.yml
    parameters:
      wifServiceConnectionName: azure-public/vside package push
      deadPATServiceConnectionId: 207efd62-fd0f-43e7-aeae-17c4febcc660 # azure-public/vs-impl

