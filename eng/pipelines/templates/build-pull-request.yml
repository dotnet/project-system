# Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE.md file in the project root for more information.

jobs:
- job: BuildPullRequest_${{ parameters.BuildConfiguration }}
  displayName: ${{ parameters.BuildConfiguration }} Configuration
  timeoutInMinutes: 20
  variables:
    BuildConfiguration: ${{ parameters.BuildConfiguration }}
    ArtifactName: ${{ parameters.ArtifactName }}
    VisualStudioMinimumVersion: ${{ parameters.VisualStudioMinimumVersion }}
  steps:

  ###################################################################################################################################################################
  # BUILD REPOSITORY
  ###################################################################################################################################################################

  # Use a disabled, empty script to display the section header in the pipeline UI.
  - script:
    displayName: === Build Repository ===
    condition: false
  
  - powershell: $(Build.SourcesDirectory)/eng/scripts/AddNpmToPath.ps1
    displayName: Add npm to path

  - powershell: npm --version
    displayName: Check npm version

  - task: NuGetAuthenticate@1
    displayName: Authenticate NuGet feeds
    inputs:
      forceReinstallCredentialProvider: true

  # Ensure the .NET runtime needed by our unit tests is installed.
  - task: UseDotNet@2
    displayName: Install .NET Runtime
    inputs:
      packageType: runtime
      # This should match the target of our unit test projects.
      version: 9.0.x

  # Allows for accessing the internal AzDO feed (vs-impl-internal) for project restore via Azure Artifacts Credential Provider.
  # See: https://github.com/microsoft/artifacts-credprovider#automatic-usage
  # YAML reference: https://docs.microsoft.com/azure/devops/pipelines/tasks/package/nuget-authenticate?view=azure-devops
  - task: NuGetAuthenticate@1
    displayName: Authenticate NuGet

  # Sets the VisualStudioMinimumVersion variable for the job.
  # https://docs.microsoft.com/azure/devops/pipelines/process/set-variables-scripts?view=azure-devops&tabs=powershell#set-variable-properties
  - powershell: Write-Host "##vso[task.setvariable variable=VisualStudioMinimumVersion;isoutput=true]$(VisualStudioMinimumVersion)"
    displayName: Set VisualStudioMinimumVersion Variable
    # Name is required to reference the variables created within this build step in other stages.
    name: SetVisualStudioMinimumVersionVariable

  # Runs the full build of the projects in the repository. See Build.proj for details.
  - script:  $(Build.SourcesDirectory)/build.cmd /v:normal /p:Configuration=$(BuildConfiguration) /p:CIBuild=true
    displayName: Build All Projects
    env:
      # This allows NuGet to retry in situations related to "automatic retry for untrusted root failures."
      # We are experiencing issues with NuGet package restoration stating, "The author primary signature validity period has expired."
      # Details on this issue can be found here: https://github.com/dotnet/arcade/issues/13070
      # Variable reference: https://learn.microsoft.com/en-us/nuget/reference/errors-and-warnings/nu3028#retry-untrusted-root-failures
      NUGET_EXPERIMENTAL_CHAIN_BUILD_RETRY_POLICY: 3,1000

  ###################################################################################################################################################################
  # PUBLISH BUILD
  # Steps in this section should contain 'condition: succeededOrFailed()' since these artifacts can be used for analyzing build failures.
  # https://docs.microsoft.com/azure/devops/pipelines/process/tasks?view=azure-devops&tabs=yaml#task-control-options
  ###################################################################################################################################################################

  # Use a disabled, empty script to display the section header in the pipeline UI.
  - script:
    displayName: === Publish Build ===
    condition: false

  # Publishes the test results to the Azure Pipeline itself so they can be viewed in the UI.
  # This needs to be ran after the build, because if the build failed due to a test failure, the test results wouldn't be published.
  - task: PublishTestResults@2
    displayName: Publish Test Results
    inputs:
      testRunner: VSTest
      testResultsFiles: $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/TestResults/**/*.trx
      testRunTitle: Unit Test Results
    condition: succeededOrFailed()

  # The .artifactignore file filters the artifacts published from a particular folder.
  # This must be present in the folder we want to publish and be named '.artifactignore'.
  # See: https://docs.microsoft.com/azure/devops/artifacts/reference/artifactignore?view=azure-devops
  - powershell: Copy-Item -Path '$(Build.SourcesDirectory)/eng/pipelines/configuration/build.artifactignore' -Destination '$(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/.artifactignore'
    displayName: Copy Build Artifact Filter
    condition: succeededOrFailed()

  # Publishes the artifacts folder contents to the Azure Pipeline for use in other jobs/stages.
  # This publish is filtered by the .artifactignore in the 'eng' folder. See that file for more details.
  - publish: $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)
    displayName: Publish Build Artifacts
    artifact: $(ArtifactName)
    condition: succeededOrFailed()
    
    # Checks for Component Governance issues introduced by the pull request.
    # See: https://docs.opensource.microsoft.com/tools/cg/governed-repos/pull-request-integration/
  - task: ComponentGovernanceComponentDetection@0
    displayName: Run Component Governance Check
    inputs:
      scanType: 'Register'
      verbosity: 'Verbose'
      alertWarningLevel: 'High'