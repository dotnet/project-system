<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="NoActionProfileName" xml:space="preserve">
    <value>Start</value>
  </data>
  <data name="JsonErrorsNeedToBeCorrected_1" xml:space="preserve">
    <value>Errors in '{0}' need to be corrected before applying changes.</value>
    <comment>{0} is the path to the malformed .json file.</comment>
  </data>
  <data name="JsonErrorsNeedToBeCorrected_WithErrorMessage_2" xml:space="preserve">
    <value>Errors in '{0}' need to be corrected before applying changes. Error message:
{1}</value>
   <comment>{0} is the path to the malformed .json file. {1} is an error message containing more details about the problems in the file.</comment>
  </data>
  <data name="MsBuildMissingValueToRemove" xml:space="preserve">
    <value>The specified value to remove '{0}' was not present in the property '{1}'</value>
    <comment>{0} will be a specific property value such as "Debug", {1} will be an MsBuild property name such as "Configurations". Neither of those values will be localized.</comment>
  </data>
  <data name="MsBuildMissingValueToRename" xml:space="preserve">
    <value>The specified value to rename '{0}' was not present in the property '{1}'</value>
    <comment>{0} will be a specific property value such as "Debug", {1} will be an MsBuild property name such as "Configurations". Neither of those values will be localized.</comment>
  </data>
  <data name="AnalyzersNodeName" xml:space="preserve">
    <value>Analyzers</value>
  </data>
  <data name="AssembliesNodeName" xml:space="preserve">
    <value>Assemblies</value>
  </data>
  <data name="ComNodeName" xml:space="preserve">
    <value>COM</value>
  </data>
  <data name="DependenciesNodeName" xml:space="preserve">
    <value>Dependencies</value>
  </data>
  <data name="FrameworkAssembliesNodeName" xml:space="preserve">
    <value>Framework Assemblies</value>
  </data>
  <data name="ImportsTreeNodeName" xml:space="preserve">
    <value>Imports</value>
  </data>
  <data name="PackagesNodeName" xml:space="preserve">
    <value>Packages</value>
  </data>
  <data name="ProjectsNodeName" xml:space="preserve">
    <value>Projects</value>
  </data>
  <data name="SdkNodeName" xml:space="preserve">
    <value>SDK</value>
  </data>
  <data name="FrameworkNodeName" xml:space="preserve">
    <value>Frameworks</value>
  </data>
  <data name="SpecialFileProvider_FileOrFolderAlreadyExists" xml:space="preserve">
    <value>A file or folder with the name '{0}' already exists on disk at this location. Please choose another name.

If this file or folder does not appear in Solution Explorer, then it is not currently part of your project. To view files which exist on disk, but are not in the project, select Show All Files from the Project menu.</value>
  </data>
  <data name="OutputGroupPublishItemsDescription" xml:space="preserve">
    <value>Contains all the assemblies needed when publishing a .NET Core project.</value>
  </data>
  <data name="OutputGroupPublishItemsDisplayName" xml:space="preserve">
    <value>Publish Items</value>
  </data>
  <data name="NoAuth" xml:space="preserve">
    <value>No Authentication</value>
  </data>
  <data name="WindowsAuth" xml:space="preserve">
    <value>Windows Authentication</value>
  </data>
  <data name="ProjectLoadedWithWrongProjectType" xml:space="preserve">
    <value>The project file '{0}' cannot be opened. 

This project was loaded using the wrong project type, likely as a result of renaming the project extension outside of Visual Studio. Remove and re-add the project to have the solution pick up the right project type.</value>
  </data>
  <data name="DataFlowFaults" xml:space="preserve">
    <value>Project system data flow '{0}' closed because of an exception: {1}.</value>
  </data>
  <data name="NeutralLanguage_DisplayNameFormatString" xml:space="preserve">
    <value>{0} - {1}</value>
    <comment>{0} is a culture name such as "English (British)" or "Portugeuse (Brazil)", and {1} is the corresponding culture code such as "en-GB" or "pt-BR". </comment>
  </data>
  <data name="Property_NoneValue" xml:space="preserve">
    <value>(None)</value>
    <comment>Special value to show in the project property pages when a property has no value.</comment>
  </data>
  <data name="DiagnosticLevel_None" xml:space="preserve">
    <value>None</value>
    <comment>Indicates that a diagnostic (i.e. a compiler warning) should be disabled.</comment>
  </data>
  <data name="DiagnosticLevel_Warning" xml:space="preserve">
    <value>Warning</value>
    <comment>Indicates that a diagnostic (i.e. a compiler warning) should be kept as a warning rather than disabled or promoted to an error.</comment>
  </data>
  <data name="DiagnosticLevel_Error" xml:space="preserve">
    <value>Error</value>
    <comment>Indicates that a diagnostic (i.e. a compiler warning) should be promoted to an error.</comment>
  </data>
  <data name="Restore_DuplicateToolReferenceItems" xml:space="preserve">
    <value>The metadata on 'DotNetCliToolReference' item '{0}' is inconsistent between target frameworks. Only the first one will be restored.</value>
  </data>
  <data name="Restore_EmptyTargetFrameworkMoniker" xml:space="preserve">
    <value>The value of the 'TargetFrameworkMoniker' and 'NuGetTargetMoniker' properties in the '{0}' configuration are both empty. This configuration will not contribute to NuGet restore, which may result in restore and build errors.</value>
  </data>
  <data name="Restore_PropertyWithInconsistentValues" xml:space="preserve">
    <value>The value of the '{0}' property is inconsistent between target frameworks. This property must be identical for NuGet restore to function correctly. The value '{1}' from the '{2}' configuration will be used, other target frameworks may fail to pick NuGet assets.</value>
    <comment>{0} is a file path.</comment>
  </data>
  <data name="Restore_NuGetCycleDetected" xml:space="preserve">
    <value>A NuGet restore loop has been detected in project '{0}'. Further restores have been aborted. The project might be in a bad state.</value>
    <comment>{0} is a file path.</comment>
  </data>

  <data name="HotReloadOutputWindowPaneName" xml:space="preserve">
    <value>Hot Reload</value>
    <comment>This is the name given to the Output Window pane responsible for displaying messages related to Hot Reload operations.</comment>
  </data>
  <data name="HotReloadApplyUpdatesSuccessful" xml:space="preserve">
    <value>Updates applied successfully.</value>
  </data>
  <data name="HotReloadApplyUpdatesFailure" xml:space="preserve">
    <value>Applying updates failed: {0}</value>
  </data>
  <data name="HotReloadErrorsInApplication" xml:space="preserve">
    <value>Errors found in application: </value>
  </data>
  <data name="HotReloadRestartInProgress" xml:space="preserve">
    <value>Rebuilding and restarting the application since the edits can't be applied dynamically.</value>
  </data>
  <data name="HotReloadStoppingApplication" xml:space="preserve">
    <value>Stopping application.</value>
  </data>
  <data name="HotReloadStartSession" xml:space="preserve">
    <value>Hot Reload session started.</value>
  </data>
  <data name="HotReloadStopSession" xml:space="preserve">
    <value>Hot Reload session complete.</value>
  </data>
  <data name="HotReloadSendingUpdates" xml:space="preserve">
    <value>Sending updates to running application.</value>
  </data>
  <data name="ProjectHotReloadSessionManager_AttachingToProcess" xml:space="preserve">
    <value>Attaching to process.</value>
  </data>
  <data name="ProjectHotReloadSessionManager_ProcessAlreadyExited" xml:space="preserve">
    <value>The process has already exited.</value>
  </data>
  <data name="ProjectHotReloadSessionManager_NoActiveProcess" xml:space="preserve">
    <value>Unable to start Hot Reload session: no active process.</value>
  </data>
  <data name="ProjectHotReloadSessionManager_ProcessExited" xml:space="preserve">
    <value>The process has exited.</value>
  </data>
  <data name="ProjectHotReloadSessionManager_ErrorStoppingTheSession" xml:space="preserve">
    <value>Error while stopping the session: {0}
{1}</value>
    <comment>{0} is the exception type name. {1} is the exception message.</comment>
  </data>
  <data name="ProjectHotReloadSessionManager_StartupHooksDisabled" xml:space="preserve">
    <value>Hot Reload is not available because startup hooks have been disabled, possibly due to trimming.</value>
  </data>
  <data name="HotReloadBuildFail" xml:space="preserve">
    <value>Unable to restart the project due to a build failure. Fix the build and try again.</value>
  </data>
</root>