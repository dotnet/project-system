<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en" target-language="ko" original="../BuildPropertyPage.VisualBasic.xaml">
    <body>
      <trans-unit id="BoolProperty|DefineDebug|Description">
        <source>Specify DEBUG as a compilation constant.</source>
        <target state="translated">DEBUG를 컴파일 상수로 지정합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="BoolProperty|DefineDebug|DisplayName">
        <source>Define DEBUG constant</source>
        <target state="translated">DEBUG 상수 정의</target>
        <note />
      </trans-unit>
      <trans-unit id="BoolProperty|DefineTrace|Description">
        <source>Specify TRACE as a compilation constant.</source>
        <target state="translated">TRACE를 컴파일 상수로 지정합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="BoolProperty|DefineTrace|DisplayName">
        <source>Define TRACE constant</source>
        <target state="translated">TRACE 상수 정의</target>
        <note />
      </trans-unit>
      <trans-unit id="BoolProperty|GenerateDocumentationFile|Description">
        <source>Specifies whether to generate documentation information.</source>
        <target state="translated">설명서 정보를 생성할지 여부를 지정합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="BoolProperty|GenerateDocumentationFile|DisplayName">
        <source>Generate XML documentation file</source>
        <target state="translated">XML 문서 파일 생성</target>
        <note />
      </trans-unit>
      <trans-unit id="BoolProperty|Optimize|Description">
        <source>Enable compiler optimizations.</source>
        <target state="translated">컴파일러 최적화를 사용하도록 설정합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="BoolProperty|Optimize|DisplayName">
        <source>Enable optimizations</source>
        <target state="translated">최적화 사용</target>
        <note />
      </trans-unit>
      <trans-unit id="BoolProperty|Prefer32Bit|Description">
        <source>Run in 32-bit mode on systems that support both 32-bit and 64-bit applications.</source>
        <target state="translated">32비트 및 64비트 응용 프로그램을 모두 지원하는 시스템에서 32비트 모드로 실행합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="BoolProperty|Prefer32Bit|DisplayName">
        <source>Prefer 32-bit</source>
        <target state="translated">32비트 선호</target>
        <note />
      </trans-unit>
      <trans-unit id="BoolProperty|PreferNativeArm64|Description">
        <source>Run on native hardware platform by default.</source>
        <target state="new">Run on native hardware platform by default.</target>
        <note />
      </trans-unit>
      <trans-unit id="BoolProperty|PreferNativeArm64|DisplayName">
        <source>Prefer Native ARM64</source>
        <target state="new">Prefer Native ARM64</target>
        <note />
      </trans-unit>
      <trans-unit id="BoolProperty|PublishDocumentationFile|Description">
        <source>When this property is true, the XML documentation file for the project, if one is generated, is included in the publish output for the project. This property defaults to true.</source>
        <target state="translated">이 속성이 true이면 프로젝트의 XML 문서 파일이 생성된 경우 프로젝트의 게시 출력에 포함됩니다. 이 속성의 기본값은 true입니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="BoolProperty|PublishDocumentationFile|DisplayName">
        <source>Publish documentation file</source>
        <target state="translated">문서 파일 게시</target>
        <note />
      </trans-unit>
      <trans-unit id="BoolProperty|RegisterForComInterop|Description">
        <source>Specifies whether your managed application will expose a COM object (a COM-callable wrapper) that enables a COM object to interact with the application.</source>
        <target state="translated">관리되는 애플리케이션이 COM 개체가 애플리케이션과 상호 작용할 수 있도록 하는 COM 개체(COM 호출 가능 래퍼)를 노출할지 여부를 지정합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="BoolProperty|RegisterForComInterop|DisplayName">
        <source>Register for COM interop</source>
        <target state="translated">COM interop 등록</target>
        <note />
      </trans-unit>
      <trans-unit id="BoolProperty|RemoveIntegerChecks|Description">
        <source>Remove integer overflow checking.</source>
        <target state="translated">정수 오버플로 검사를 제거합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="BoolProperty|RemoveIntegerChecks|DisplayName">
        <source>Remove integer overflow checks</source>
        <target state="translated">정수 오버플로 검사 해제</target>
        <note />
      </trans-unit>
      <trans-unit id="Category|Advanced|Description">
        <source>Advanced settings for the application.</source>
        <target state="translated">응용 프로그램에 대한 고급 설정입니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="Category|Advanced|DisplayName">
        <source>Advanced</source>
        <target state="translated">고급</target>
        <note />
      </trans-unit>
      <trans-unit id="Category|Events|Description">
        <source>Configures custom events that run before and after build.</source>
        <target state="translated">빌드 전후에 실행되는 사용자 지정 이벤트를 구성합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="Category|Events|DisplayName">
        <source>Events</source>
        <target state="translated">이벤트</target>
        <note />
      </trans-unit>
      <trans-unit id="Category|General|DisplayName">
        <source>General</source>
        <target state="translated">일반</target>
        <note />
      </trans-unit>
      <trans-unit id="Category|Options|DisplayName">
        <source>Options</source>
        <target state="translated">옵션</target>
        <note />
      </trans-unit>
      <trans-unit id="Category|Warnings|DisplayName">
        <source>Warnings</source>
        <target state="translated">경고</target>
        <note />
      </trans-unit>
      <trans-unit id="DynamicEnumProperty|DuplicateOrOverlappingCatchBlocks|DisplayName">
        <source>Duplicate or overlapping catch blocks</source>
        <target state="translated">중복되거나 겹치는 catch 블록</target>
        <note />
      </trans-unit>
      <trans-unit id="DynamicEnumProperty|ImplicitConversion|Description">
        <source>Implicit narrowing conversion occurs when there is an implicit data type conversion that is a narrowing conversion. Always 'Error' when 'Option strict' is on.</source>
        <target state="translated">암시적 축소 변환은 축소 변환인 암시적 데이터 형식 변환이 있을 때 발생합니다. 'Option strict'가 켜져 있으면 항상 'Error'입니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="DynamicEnumProperty|ImplicitConversion|DisplayName">
        <source>Implicit conversion</source>
        <target state="translated">암시적 변환</target>
        <note />
      </trans-unit>
      <trans-unit id="DynamicEnumProperty|ImplicitType|Description">
        <source>Implicit object type errors occur when an appropriate type cannot be inferred for a declared variable, so a type of 'Object' is inferred. Always 'Error' when 'Option strict' is on.</source>
        <target state="translated">선언된 변수에 대해 적절한 형식을 유추할 수 없으므로 'Object' 형식이 유추될 때 암시적 개체 형식 오류가 발생합니다. 'Option strict'가 켜져 있으면 항상 'Error'입니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="DynamicEnumProperty|ImplicitType|DisplayName">
        <source>Implicit type</source>
        <target state="translated">암시적 형식</target>
        <note />
      </trans-unit>
      <trans-unit id="DynamicEnumProperty|InstanceVariableAccessesSharedMember|DisplayName">
        <source>Instance variable accesses shared member</source>
        <target state="translated">인스턴스 변수가 공유 멤버에 액세스함</target>
        <note />
      </trans-unit>
      <trans-unit id="DynamicEnumProperty|LateBinding|Description">
        <source>An object is late bound when it is assigned to a property or method of a variable that is declared to be of type 'Object'. These operations could fail at run time. Always 'Error' when 'Option strict' is on.</source>
        <target state="translated">개체는 'Object' 형식으로 선언된 변수의 속성 또는 메서드에 할당될 때 런타임에 바인딩됩니다. 이러한 작업은 런타임에 실패할 수 있습니다. 'Option strict'가 켜져 있으면 항상 'Error'입니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="DynamicEnumProperty|LateBinding|DisplayName">
        <source>Late binding</source>
        <target state="translated">런타임에 바인딩</target>
        <note />
      </trans-unit>
      <trans-unit id="DynamicEnumProperty|PlatformTarget|Description">
        <source>Specifies the processor to be targeted by the output file. Choose 'Any CPU' to specify that any processor is acceptable, allowing the application to run on the broadest range of hardware.</source>
        <target state="translated">출력 파일의 대상으로 지정할 프로세서를 지정합니다. 애플리케이션이 가장 광범위한 하드웨어에서 실행되도록 모든 프로세서를 수락하도록 지정하려면 '모든 CPU'를 선택합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="DynamicEnumProperty|PlatformTarget|DisplayName">
        <source>Target CPU</source>
        <target state="translated">대상 CPU</target>
        <note />
      </trans-unit>
      <trans-unit id="DynamicEnumProperty|RecursiveOperatorOrPropertyAccess|DisplayName">
        <source>Recursive operator or property access</source>
        <target state="translated">재귀 연산자 또는 속성 액세스</target>
        <note />
      </trans-unit>
      <trans-unit id="DynamicEnumProperty|ReturningIntrinsicValueTypeWithoutReturnValue|DisplayName">
        <source>Function returning intrinsic value type without return value</source>
        <target state="translated">반환 값 없이 내장 값 유형을 반환하는 함수</target>
        <note />
      </trans-unit>
      <trans-unit id="DynamicEnumProperty|ReturningRefTypeWithoutReturnValue|DisplayName">
        <source>Function returning reference type without return value</source>
        <target state="translated">반환 값 없이 참조 형식을 반환하는 함수</target>
        <note />
      </trans-unit>
      <trans-unit id="DynamicEnumProperty|UnusedLocalVariable|DisplayName">
        <source>Unused local variable</source>
        <target state="translated">사용되지 않은 지역 변수</target>
        <note />
      </trans-unit>
      <trans-unit id="DynamicEnumProperty|UseOfVariablePriorToAssignment|DisplayName">
        <source>Use of variable prior to assignment</source>
        <target state="translated">할당 전 변수 사용</target>
        <note />
      </trans-unit>
      <trans-unit id="EnumProperty|DebugType|Description">
        <source>Specifies the kind of debug symbols produced during build.</source>
        <target state="translated">빌드하는 동안 생성된 디버그 기호의 종류를 지정합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="EnumProperty|DebugType|DisplayName">
        <source>Debug symbols</source>
        <target state="translated">디버그 기호</target>
        <note>="PDB Only" /&gt;</note>
      </trans-unit>
      <trans-unit id="EnumProperty|DebugType|Metadata|SearchTerms">
        <source>debug type</source>
        <target state="translated">디버그 형식</target>
        <note />
      </trans-unit>
      <trans-unit id="EnumProperty|GenerateSerializationAssemblies|DisplayName">
        <source>Generate serialization assemblies</source>
        <target state="translated">Serialization 어셈블리 생성</target>
        <note />
      </trans-unit>
      <trans-unit id="EnumProperty|OptionCompare|Description">
        <source>Specifies the type of string comparison to use.</source>
        <target state="translated">사용할 문자열 비교의 형식을 지정합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="EnumProperty|OptionCompare|DisplayName">
        <source>Option compare</source>
        <target state="translated">옵션 비교</target>
        <note />
      </trans-unit>
      <trans-unit id="EnumProperty|OptionExplicit|Description">
        <source>Specifies whether to require explicit declaration of variables.</source>
        <target state="translated">변수의 명시적 선언을 요구할지 여부를 지정합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="EnumProperty|OptionExplicit|DisplayName">
        <source>Option explicit</source>
        <target state="translated">명시적 옵션</target>
        <note />
      </trans-unit>
      <trans-unit id="EnumProperty|OptionInfer|Description">
        <source>Specifies whether to allow local type inference in variable declarations.</source>
        <target state="translated">변수 선언에서 로컬 형식 유추를 허용할지 여부를 지정합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="EnumProperty|OptionInfer|DisplayName">
        <source>Option infer</source>
        <target state="translated">옵션 유추</target>
        <note />
      </trans-unit>
      <trans-unit id="EnumProperty|OptionStrict|Description">
        <source>Specifies whether to enforce strict type semantics.</source>
        <target state="translated">엄격한 형식 의미 체계를 적용할지 여부를 지정합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="EnumProperty|OptionStrict|DisplayName">
        <source>Option strict</source>
        <target state="translated">제한 옵션</target>
        <note />
      </trans-unit>
      <trans-unit id="EnumProperty|RunPostBuildEvent|Description">
        <source>Specifies under which condition the post-build event will be executed.</source>
        <target state="translated">빌드 후 이벤트가 실행될 조건을 지정합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="EnumProperty|RunPostBuildEvent|DisplayName">
        <source>When to run the post-build event</source>
        <target state="translated">빌드 후 이벤트를 실행하는 경우</target>
        <note />
      </trans-unit>
      <trans-unit id="EnumProperty|WarningSeverity|DisplayName">
        <source>Warning severity</source>
        <target state="translated">경고 심각도</target>
        <note />
      </trans-unit>
      <trans-unit id="EnumValue|DebugType.embedded|DisplayName">
        <source>Embedded in DLL/EXE, portable across platforms</source>
        <target state="translated">DLL/EXE에 포함됨, 플랫폼 간에 이동 가능</target>
        <note />
      </trans-unit>
      <trans-unit id="EnumValue|DebugType.full|DisplayName">
        <source>PDB file, current platform</source>
        <target state="translated">PDB 파일, 현재 플랫폼</target>
        <note />
      </trans-unit>
      <trans-unit id="EnumValue|DebugType.none|DisplayName">
        <source>No symbols are emitted</source>
        <target state="translated">내보낸 기호 없음</target>
        <note />
      </trans-unit>
      <trans-unit id="EnumValue|DebugType.portable|DisplayName">
        <source>PDB file, portable across platforms</source>
        <target state="translated">PDB 파일, 플랫폼 간에 이동 가능</target>
        <note />
      </trans-unit>
      <trans-unit id="EnumValue|GenerateSerializationAssemblies.Auto|DisplayName">
        <source>Auto</source>
        <target state="translated">자동</target>
        <note />
      </trans-unit>
      <trans-unit id="EnumValue|GenerateSerializationAssemblies.Off|DisplayName">
        <source>Off</source>
        <target state="translated">해제</target>
        <note />
      </trans-unit>
      <trans-unit id="EnumValue|GenerateSerializationAssemblies.On|DisplayName">
        <source>On</source>
        <target state="translated">설정</target>
        <note />
      </trans-unit>
      <trans-unit id="EnumValue|OptionCompare.Binary|DisplayName">
        <source>Binary</source>
        <target state="new">Binary</target>
        <note>{Locked}</note>
      </trans-unit>
      <trans-unit id="EnumValue|OptionCompare.Text|DisplayName">
        <source>Text</source>
        <target state="new">Text</target>
        <note>{Locked}</note>
      </trans-unit>
      <trans-unit id="EnumValue|OptionExplicit.Off|DisplayName">
        <source>Off</source>
        <target state="new">Off</target>
        <note>{Locked}</note>
      </trans-unit>
      <trans-unit id="EnumValue|OptionExplicit.On|DisplayName">
        <source>On</source>
        <target state="new">On</target>
        <note>{Locked}</note>
      </trans-unit>
      <trans-unit id="EnumValue|OptionInfer.Off|DisplayName">
        <source>Off</source>
        <target state="new">Off</target>
        <note>{Locked}</note>
      </trans-unit>
      <trans-unit id="EnumValue|OptionInfer.On|DisplayName">
        <source>On</source>
        <target state="new">On</target>
        <note>{Locked}</note>
      </trans-unit>
      <trans-unit id="EnumValue|OptionStrict.Off|DisplayName">
        <source>Off</source>
        <target state="new">Off</target>
        <note>{Locked}</note>
      </trans-unit>
      <trans-unit id="EnumValue|OptionStrict.On|DisplayName">
        <source>On</source>
        <target state="new">On</target>
        <note>{Locked}</note>
      </trans-unit>
      <trans-unit id="EnumValue|RunPostBuildEvent.Always|DisplayName">
        <source>Always</source>
        <target state="translated">항상</target>
        <note />
      </trans-unit>
      <trans-unit id="EnumValue|RunPostBuildEvent.OnBuildSuccess|DisplayName">
        <source>When the build succeeds</source>
        <target state="translated">빌드가 성공한 경우</target>
        <note />
      </trans-unit>
      <trans-unit id="EnumValue|RunPostBuildEvent.OnOutputUpdated|DisplayName">
        <source>When the output is updated</source>
        <target state="translated">출력이 업데이트된 경우</target>
        <note />
      </trans-unit>
      <trans-unit id="EnumValue|WarningSeverity.AllAsErrors|DisplayName">
        <source>Treat all warnings as errors</source>
        <target state="translated">모든 경고를 오류로 처리</target>
        <note />
      </trans-unit>
      <trans-unit id="EnumValue|WarningSeverity.DisableAll|DisplayName">
        <source>Disable all warnings</source>
        <target state="translated">모든 경고를 사용하지 않습니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="EnumValue|WarningSeverity.Individual|DisplayName">
        <source>Set warning severities individually</source>
        <target state="translated">개별적으로 경고 심각도 설정</target>
        <note />
      </trans-unit>
      <trans-unit id="Rule|Build|Description">
        <source>Specifies properties that control how the project builds.</source>
        <target state="translated">프로젝트가 빌드되는 방식을 제어하는 속성을 지정합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="Rule|Build|DisplayName">
        <source>Compile</source>
        <target state="translated">컴파일</target>
        <note />
      </trans-unit>
      <trans-unit id="StringProperty|BaseAddress|DisplayName">
        <source>DLL base address</source>
        <target state="translated">DLL 기준 주소</target>
        <note />
      </trans-unit>
      <trans-unit id="StringProperty|DefineConstants|Description">
        <source>Specifies custom conditional compilation constants for your application. Note that values are optional, for the optional behavior leave the value blank. If the value is a string, please add quotation marks around it.</source>
        <target state="translated">애플리케이션에 대한 사용자 지정 조건부 컴파일 상수를 지정합니다. 값은 선택 사항이며 선택적 동작의 경우 값을 비워 둡니다. 값이 문자열인 경우 주위에 따옴표를 추가하세요.</target>
        <note />
      </trans-unit>
      <trans-unit id="StringProperty|DefineConstants|DisplayName">
        <source>Custom constants</source>
        <target state="translated">사용자 지정 상수</target>
        <note />
      </trans-unit>
      <trans-unit id="StringProperty|DocumentationFile|Description">
        <source>Optional path for the API documentation file. Leave blank to use the default location.</source>
        <target state="translated">API 설명서 파일의 선택적 경로입니다. 기본 위치를 사용하려면 비워 두세요.</target>
        <note />
      </trans-unit>
      <trans-unit id="StringProperty|DocumentationFile|DisplayName">
        <source>XML documentation file path</source>
        <target state="translated">XML 설명서 파일 경로</target>
        <note />
      </trans-unit>
      <trans-unit id="StringProperty|OutputPath|DisplayName">
        <source>Build output path</source>
        <target state="translated">빌드 출력 경로</target>
        <note />
      </trans-unit>
      <trans-unit id="StringProperty|PostBuildEvent|Description">
        <source>Specifies commands that run after the build completes. Does not run if the build failed. Use 'call' to invoke .bat files. A non-zero exit code will fail the build.</source>
        <target state="translated">빌드가 완료된 후 실행되는 명령을 지정합니다. 빌드가 실패하면 실행되지 않습니다. .bat 파일을 호출하려면 '호출'을 사용하세요. 0이 아닌 종료 코드는 빌드에 실패합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="StringProperty|PostBuildEvent|DisplayName">
        <source>Post-build event</source>
        <target state="translated">빌드 후 이벤트</target>
        <note />
      </trans-unit>
      <trans-unit id="StringProperty|PreBuildEvent|Description">
        <source>Specifies commands that run before the build starts. Does not run if the project is up-to-date. A non-zero exit code will fail the build before it runs.</source>
        <target state="translated">빌드가 시작되기 전에 실행되는 명령을 지정합니다. 프로젝트가 최신 상태이면 실행되지 않습니다. 0이 아닌 종료 코드는 실행되기 전에 빌드에 실패합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="StringProperty|PreBuildEvent|DisplayName">
        <source>Pre-build event</source>
        <target state="translated">빌드 전 이벤트</target>
        <note />
      </trans-unit>
    </body>
  </file>
</xliff>