<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE.md file in the project root for more information. -->
<!--

  This file contains Visual Studio and designer-related properties and items for C# projects.

-->

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Import Project="Microsoft.Managed.DesignTime.targets" />

  <!-- Properties -->
  <PropertyGroup>
    <AppDesignerFolder Condition="'$(AppDesignerFolder)' == ''">Properties</AppDesignerFolder>
    <AppDesignerFolderContentsVisibleOnlyInShowAllFiles Condition="'$(AppDesignerFolderContentsVisibleOnlyInShowAllFiles)' == ''">false</AppDesignerFolderContentsVisibleOnlyInShowAllFiles>
    <LanguageServiceName Condition="'$(LanguageServiceName)' == ''">C#</LanguageServiceName>
    <LanguageServiceId Condition="'$(LanguageServiceId)'==''">{694DD9B6-B865-4C5B-AD85-86356E9C88DC}</LanguageServiceId>
    <TemplateLanguage Condition="'$(TemplateLanguage)' == ''">CSharp</TemplateLanguage>
    <AddItemTemplatesGuid Condition="'$(AddItemTemplatesGuid)' == ''">{FAE04EC0-301F-11d3-BF4B-00C04F79EFBC}</AddItemTemplatesGuid>
    <CmdUIContextGuid Condition="'$(CmdUIContextGuid)' == ''">{FAE04EC1-301F-11d3-BF4B-00C04F79EFBC}</CmdUIContextGuid>
    <GeneratorsTypeGuid Condition="'$(GeneratorsTypeGuid)' == ''">{FAE04EC1-301F-11d3-BF4B-00C04F79EFBC}</GeneratorsTypeGuid>
    <DesignerFunctionVisibility Condition="'$(DesignerFunctionVisibility)' == ''">Private</DesignerFunctionVisibility>
    <DesignerVariableNaming Condition="'$(DesignerVariableNaming)' == ''">Camel</DesignerVariableNaming>
    <DesignerHiddenCodeGeneration Condition="'$(DesignerHiddenCodeGeneration)' == ''">Declarations</DesignerHiddenCodeGeneration>

    <!-- Turn off rules and capabilities that are defined in MSBuild so that we can import our own below -->
    <DefineCSharpItemSchemas>false</DefineCSharpItemSchemas>
  </PropertyGroup>

  <ItemGroup>
    <PropertyPageSchema Include="$(ManagedXamlResourcesDirectory)ProjectItemsSchema.CSharp.xaml;" />

    <ProjectCapability Include="
                          CSharp;
                          Managed;
                          ClassDesigner;
                          SharedProjectReferences;
                          ProjectPropertiesEditor;" />
  </ItemGroup>

  <ItemGroup Condition="'$(DefineCommonManagedItemSchemas)' == 'true'">

    <PropertyPageSchema Include="$(ManagedXamlResourcesDirectory)ApplicationPropertyPage.CSharp.xaml">
      <Context>Project</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlResourcesDirectory)BuildPropertyPage.CSharp.xaml">
      <Context>Project</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlResourcesDirectory)ReferencesPage.CSharp.xaml">
      <Context>Project</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlNeutralResourcesDirectory)EditorConfigFiles.xaml">
      <Context>File</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlResourcesDirectory)EditorConfigFiles.BrowseObject.xaml">
      <Context>BrowseObject</Context>
    </PropertyPageSchema>

  </ItemGroup>

  <!-- Targets -->

<!-- Razor cohosting support for projects that don't use the Razor SDK -->

  <!--
    If there are any .razor or .cshtml files in this project we want to do three things:

      1. Add a 'RazorWithoutSdk' capability to the project so tooling can light up as necessary
      2. Reference the Razor source generator
      3. Add each .razor and .cshtml file to the project as an AdditionalFiles item so the source generator can see it
  -->

  <!-- .NET Framework uses a different editor in VS -->
 <Target Name="DetectRazorOrCshtmlFiles" BeforeTargets="AssignProjectConfiguration" Condition="'$(DesignTimeBuild)' == 'true' And '$(TargetFrameworkIdentifier)' != '.NETFramework' And '$(UsingMicrosoftNETSdkRazor)' != 'true'">
    <ItemGroup>
      <!-- Collect all Razor and CSHTML files -->
      <_RazorOrCshtmlFiles Include="**\*.razor;**\*.cshtml" />
    </ItemGroup>

    <!-- Add a capability to control initialization of Razor in the IDE -->
    <ItemGroup Condition="'@(_RazorOrCshtmlFiles)' != ''">
      <ProjectCapability Include="RazorWithoutSdk" />
    </ItemGroup>

    <!-- As a get out of jail card, we let users turn off anything impactful, but their IDE won't really work. -->
    <ItemGroup Condition="'$(DisableAllRazorFilesAsAdditionalFiles)' != 'true' And '@(_RazorOrCshtmlFiles)' != ''">
      <AdditionalFiles Include="@(_RazorOrCshtmlFiles)" />
    </ItemGroup>

    <ItemGroup Condition="'$(DisableAutomaticRazorSourceGeneratorReference)' != 'true' And '@(_RazorOrCshtmlFiles)' != ''">
      <!-- The Razor analyzer loader will redirect DLL loads to the right place for tooling, as long as the right filename is referenced -->
      <Analyzer Include="Microsoft.CodeAnalysis.Razor.Compiler.dll" />
    </ItemGroup>
  </Target>

  <!--
    Backwards compatibility workaround for https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1803616/.
    Razor is dependent on RazorSourceGenerator.razorencconfig during design-time build in order to behave correctly.
    The SDK conditionally includes this config file, however with the current global properties that are set,
    the condition is not met and config file will not be included. This workaround ensures the config file is included during design-time build.
    Tracking item to remove the workaround: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1806334.
  -->
  <Target Name="_FixRazorEditorConfigFiles" AfterTargets="_PrepareRazorSourceGenerators">
    <ItemGroup>
      <EditorConfigFiles Remove="$(RazorEncConfigFile)" Condition="'$(DesignTimeBuild)' == 'true'"/>
      <EditorConfigFiles Include="$(RazorEncConfigFile)" Condition="'$(DesignTimeBuild)' == 'true'"/>
    </ItemGroup>
  </Target>

  <!-- Returns Csc command-line arguments for the language service -->
  <Target Name="CompileDesignTime"
          Returns="@(_CompilerCommandLineArgs)"
          DependsOnTargets="_CheckCompileDesignTimePrerequisite;Compile"
          Condition="'$(IsCrossTargetingBuild)' != 'true'">

    <ItemGroup>
      <_CompilerCommandLineArgs Include="@(CscCommandLineArgs)" />
    </ItemGroup>

  </Target>

</Project>